var expect = require('chai').expect;

// Math.min([value1[, value2[, ...]]])
// The Math.min() function returns the smallest of zero or more numbers.

// Because min is a static property of Math, you always use it as Math.min,
// rather than as a property of a Math object you created (Math is not a constructor).



describe('Math', function(){
	describe('#min', function(){
		it('returns the smallest of zero or more numbers.', function(){
			expect( Math.min(10, 20) ).to.equal(  10 );
			expect( Math.min(-10, -20) ).to.equal( -20 );
			expect( Math.min(-10, 20) ).to.equal(  -10 );
		});

		it('returns Infinity if no arguments are given', function(){
			expect( Math.min() ).to.equal( Number.POSITIVE_INFINITY );
		});

		it('returns NaN if at least one of arguments cannot be converted to a number', function(){
			expect( Math.min('notNumber') ).to.be.NaN;
		});

		describe('use:', function(){
			it('getminOfArray', function(){
				function getminOfArray(numArray) {
				  return Math.min.apply(null, numArray);
				}

				expect( getminOfArray([1,2,3]) ).to.equal( 1 );

				// or using spread
				// var arr = [1, 2, 3];
				// var min = Math.min(...arr);
			});

			it('lipping a value -- boundary', function(){
				var f = function(x){
					return x + 5;
				};
				// var x = f(foo);

				// if (x > boundary) {
				//   x = boundary;
				// }
				//
				var boundary = 9;
				var x = Math.min(f(5), boundary);
				expect( x ).to.equal( 9 );
			})
		});
	});
});


